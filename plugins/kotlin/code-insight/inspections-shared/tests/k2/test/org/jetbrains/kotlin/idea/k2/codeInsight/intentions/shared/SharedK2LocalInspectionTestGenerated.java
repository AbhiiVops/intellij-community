// Copyright 2000-2022 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.k2.codeInsight.intentions.shared;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("code-insight/inspections-shared/tests/k2")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("../testData/inspectionsLocal")
public abstract class SharedK2LocalInspectionTestGenerated extends AbstractSharedK2LocalInspectionTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../testData/inspectionsLocal/redundantEmptyInitializerBlock")
    public static class RedundantEmptyInitializerBlock extends AbstractSharedK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("empty.kt")
        public void testEmpty() throws Exception {
            runTest("../testData/inspectionsLocal/redundantEmptyInitializerBlock/empty.kt");
        }

        @TestMetadata("hasComment.kt")
        public void testHasComment() throws Exception {
            runTest("../testData/inspectionsLocal/redundantEmptyInitializerBlock/hasComment.kt");
        }

        @TestMetadata("notEmpty.kt")
        public void testNotEmpty() throws Exception {
            runTest("../testData/inspectionsLocal/redundantEmptyInitializerBlock/notEmpty.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../testData/inspectionsLocal/redundantGetter")
    public static class RedundantGetter extends AbstractSharedK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("annotation.kt")
        public void testAnnotation() throws Exception {
            runTest("../testData/inspectionsLocal/redundantGetter/annotation.kt");
        }

        @TestMetadata("default.kt")
        public void testDefault() throws Exception {
            runTest("../testData/inspectionsLocal/redundantGetter/default.kt");
        }

        @TestMetadata("external.kt")
        public void testExternal() throws Exception {
            runTest("../testData/inspectionsLocal/redundantGetter/external.kt");
        }

        @TestMetadata("fieldExpression.kt")
        public void testFieldExpression() throws Exception {
            runTest("../testData/inspectionsLocal/redundantGetter/fieldExpression.kt");
        }

        @TestMetadata("hasType.kt")
        public void testHasType() throws Exception {
            runTest("../testData/inspectionsLocal/redundantGetter/hasType.kt");
        }

        @TestMetadata("hasTypeWithPropertyExplicitType.kt")
        public void testHasTypeWithPropertyExplicitType() throws Exception {
            runTest("../testData/inspectionsLocal/redundantGetter/hasTypeWithPropertyExplicitType.kt");
        }

        @TestMetadata("hasTypeWithPropertyInitializer.kt")
        public void testHasTypeWithPropertyInitializer() throws Exception {
            runTest("../testData/inspectionsLocal/redundantGetter/hasTypeWithPropertyInitializer.kt");
        }

        @TestMetadata("notFieldExpression.kt")
        public void testNotFieldExpression() throws Exception {
            runTest("../testData/inspectionsLocal/redundantGetter/notFieldExpression.kt");
        }

        @TestMetadata("notOnlyReturnFieldBody.kt")
        public void testNotOnlyReturnFieldBody() throws Exception {
            runTest("../testData/inspectionsLocal/redundantGetter/notOnlyReturnFieldBody.kt");
        }

        @TestMetadata("onlyReturnFieldBody.kt")
        public void testOnlyReturnFieldBody() throws Exception {
            runTest("../testData/inspectionsLocal/redundantGetter/onlyReturnFieldBody.kt");
        }

        @TestMetadata("withAnnotaionAndNonTrivialBlockBody.kt")
        public void testWithAnnotaionAndNonTrivialBlockBody() throws Exception {
            runTest("../testData/inspectionsLocal/redundantGetter/withAnnotaionAndNonTrivialBlockBody.kt");
        }

        @TestMetadata("withAnnotaionAndTrivialBlockBody.kt")
        public void testWithAnnotaionAndTrivialBlockBody() throws Exception {
            runTest("../testData/inspectionsLocal/redundantGetter/withAnnotaionAndTrivialBlockBody.kt");
        }

        @TestMetadata("withAnnotaionAndTrivialExpressionBody.kt")
        public void testWithAnnotaionAndTrivialExpressionBody() throws Exception {
            runTest("../testData/inspectionsLocal/redundantGetter/withAnnotaionAndTrivialExpressionBody.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../testData/inspectionsLocal/redundantSemicolon")
    public static class RedundantSemicolon extends AbstractSharedK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("beforeAnnotationAndLambda.kt")
        public void testBeforeAnnotationAndLambda() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/beforeAnnotationAndLambda.kt");
        }

        @TestMetadata("beforeCommentAndLambda.kt")
        public void testBeforeCommentAndLambda() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/beforeCommentAndLambda.kt");
        }

        @TestMetadata("beforeKDocAndLambda.kt")
        public void testBeforeKDocAndLambda() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/beforeKDocAndLambda.kt");
        }

        @TestMetadata("betweenNullableTypeAndNotOperator.kt")
        public void testBetweenNullableTypeAndNotOperator() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/betweenNullableTypeAndNotOperator.kt");
        }

        @TestMetadata("betweenSoftKeywordAndDeclaration.kt")
        public void testBetweenSoftKeywordAndDeclaration() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/betweenSoftKeywordAndDeclaration.kt");
        }

        @TestMetadata("betweenSoftModifierKeywordAndDeclaration.kt")
        public void testBetweenSoftModifierKeywordAndDeclaration() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/betweenSoftModifierKeywordAndDeclaration.kt");
        }

        @TestMetadata("betweenSoftModifierKeywordAndDeclaration2.kt")
        public void testBetweenSoftModifierKeywordAndDeclaration2() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/betweenSoftModifierKeywordAndDeclaration2.kt");
        }

        @TestMetadata("betweenSoftModifierKeywordAndDeclaration3.kt")
        public void testBetweenSoftModifierKeywordAndDeclaration3() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/betweenSoftModifierKeywordAndDeclaration3.kt");
        }

        @TestMetadata("betweenTypeAndNotOperator.kt")
        public void testBetweenTypeAndNotOperator() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/betweenTypeAndNotOperator.kt");
        }

        @TestMetadata("companionBeforeFun.kt")
        public void testCompanionBeforeFun() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/companionBeforeFun.kt");
        }

        @TestMetadata("companionBeforeInit.kt")
        public void testCompanionBeforeInit() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/companionBeforeInit.kt");
        }

        @TestMetadata("companionBeforePrivateFun.kt")
        public void testCompanionBeforePrivateFun() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/companionBeforePrivateFun.kt");
        }

        @TestMetadata("companionBeforeVal.kt")
        public void testCompanionBeforeVal() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/companionBeforeVal.kt");
        }

        @TestMetadata("companionInLast.kt")
        public void testCompanionInLast() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/companionInLast.kt");
        }

        @TestMetadata("companionWithBody.kt")
        public void testCompanionWithBody() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/companionWithBody.kt");
        }

        @TestMetadata("companionWithName.kt")
        public void testCompanionWithName() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/companionWithName.kt");
        }

        @TestMetadata("ifElse.kt")
        public void testIfElse() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/ifElse.kt");
        }

        @TestMetadata("startOfLine.kt")
        public void testStartOfLine() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/startOfLine.kt");
        }

        @TestMetadata("startOfLine2.kt")
        public void testStartOfLine2() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/startOfLine2.kt");
        }

        @TestMetadata("startOfLineBeforeFunctionReference.kt")
        public void testStartOfLineBeforeFunctionReference() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/startOfLineBeforeFunctionReference.kt");
        }

        @TestMetadata("startOfLineBeforeLambda.kt")
        public void testStartOfLineBeforeLambda() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/startOfLineBeforeLambda.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../testData/inspectionsLocal/removeEmptySecondaryConstructorBody")
    public static class RemoveEmptySecondaryConstructorBody extends AbstractSharedK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("comment.kt")
        public void testComment() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptySecondaryConstructorBody/comment.kt");
        }

        @TestMetadata("primaryConstructor.kt")
        public void testPrimaryConstructor() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptySecondaryConstructorBody/primaryConstructor.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptySecondaryConstructorBody/simple.kt");
        }

        @TestMetadata("withStatement.kt")
        public void testWithStatement() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptySecondaryConstructorBody/withStatement.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../testData/inspectionsLocal/removeRedundantBackticks")
    public static class RemoveRedundantBackticks extends AbstractSharedK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("functionArgument.kt")
        public void testFunctionArgument() throws Exception {
            runTest("../testData/inspectionsLocal/removeRedundantBackticks/functionArgument.kt");
        }

        @TestMetadata("functionCall.kt")
        public void testFunctionCall() throws Exception {
            runTest("../testData/inspectionsLocal/removeRedundantBackticks/functionCall.kt");
        }

        @TestMetadata("identifierContainingSpaces.kt")
        public void testIdentifierContainingSpaces() throws Exception {
            runTest("../testData/inspectionsLocal/removeRedundantBackticks/identifierContainingSpaces.kt");
        }

        @TestMetadata("inStringTemplate.kt")
        public void testInStringTemplate() throws Exception {
            runTest("../testData/inspectionsLocal/removeRedundantBackticks/inStringTemplate.kt");
        }

        @TestMetadata("inStringTemplate2.kt")
        public void testInStringTemplate2() throws Exception {
            runTest("../testData/inspectionsLocal/removeRedundantBackticks/inStringTemplate2.kt");
        }

        @TestMetadata("inStringTemplate3.kt")
        public void testInStringTemplate3() throws Exception {
            runTest("../testData/inspectionsLocal/removeRedundantBackticks/inStringTemplate3.kt");
        }

        @TestMetadata("keyword.kt")
        public void testKeyword() throws Exception {
            runTest("../testData/inspectionsLocal/removeRedundantBackticks/keyword.kt");
        }

        @TestMetadata("property.kt")
        public void testProperty() throws Exception {
            runTest("../testData/inspectionsLocal/removeRedundantBackticks/property.kt");
        }

        @TestMetadata("underscores.kt")
        public void testUnderscores() throws Exception {
            runTest("../testData/inspectionsLocal/removeRedundantBackticks/underscores.kt");
        }

        @TestMetadata("underscores2.kt")
        public void testUnderscores2() throws Exception {
            runTest("../testData/inspectionsLocal/removeRedundantBackticks/underscores2.kt");
        }

        @TestMetadata("yield.kt")
        public void testYield() throws Exception {
            runTest("../testData/inspectionsLocal/removeRedundantBackticks/yield.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../testData/inspectionsLocal/sortModifiers")
    public static class SortModifiers extends AbstractSharedK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("annotatedBefore.kt")
        public void testAnnotatedBefore() throws Exception {
            runTest("../testData/inspectionsLocal/sortModifiers/annotatedBefore.kt");
        }

        @TestMetadata("annotatedBefore2.kt")
        public void testAnnotatedBefore2() throws Exception {
            runTest("../testData/inspectionsLocal/sortModifiers/annotatedBefore2.kt");
        }

        @TestMetadata("annotation.kt")
        public void testAnnotation() throws Exception {
            runTest("../testData/inspectionsLocal/sortModifiers/annotation.kt");
        }

        @TestMetadata("annotation2.kt")
        public void testAnnotation2() throws Exception {
            runTest("../testData/inspectionsLocal/sortModifiers/annotation2.kt");
        }

        @TestMetadata("annotationGroup.kt")
        public void testAnnotationGroup() throws Exception {
            runTest("../testData/inspectionsLocal/sortModifiers/annotationGroup.kt");
        }

        @TestMetadata("annotationOverrideFinal.kt")
        public void testAnnotationOverrideFinal() throws Exception {
            runTest("../testData/inspectionsLocal/sortModifiers/annotationOverrideFinal.kt");
        }

        @TestMetadata("overrideFinal.kt")
        public void testOverrideFinal() throws Exception {
            runTest("../testData/inspectionsLocal/sortModifiers/overrideFinal.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../testData/inspectionsLocal/sortModifiers/simple.kt");
        }
    }
}
